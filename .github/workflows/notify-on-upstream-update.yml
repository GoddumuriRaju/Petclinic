name: Notify on Upstream Updates

on:
  workflow_dispatch:  # Allows manual triggering
  schedule:
    - cron: "0 * * * *" # Runs every hour

jobs:
  check-upstream-updates:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up repository
        run: |
          echo "Setting up repository..."
          git remote add upstream https://github.com/jaiswaladi246/Petclinic.git
          git fetch upstream

      - name: Check for updates in upstream
        id: check-for-updates
        run: |
          echo "Fetching updates from upstream..."
          UPDATES=$(git log HEAD..upstream/main --oneline || true)
          if [ -n "$UPDATES" ]; then
            echo "New updates found in the upstream repository."
            echo "UPDATES=$UPDATES" >> $GITHUB_ENV
          else
            echo "No updates in the upstream repository."
            echo "UPDATES=" >> $GITHUB_ENV
          fi

      - name: Send email notification
        if: env.UPDATES != ''
        env:
          EMAIL_SENDER: ${{ secrets.EMAIL_SENDER }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          EMAIL_RECEIVER: ${{ secrets.EMAIL_RECEIVER }}
          UPDATES: ${{ env.UPDATES }}
        run: |
          echo "Sending email notification..."
          python3 - <<EOF
          import smtplib
          from email.mime.text import MIMEText

          sender = "${EMAIL_SENDER}"
          receiver = "${EMAIL_RECEIVER}"
          password = "${EMAIL_PASSWORD}"
          subject = "Updates Detected in Upstream Repository"

          updates = """${UPDATES}"""
          body = f"The following updates were detected in the upstream repository:\n\n{updates}"

          msg = MIMEText(body)
          msg['Subject'] = subject
          msg['From'] = sender
          msg['To'] = receiver

          try:
              with smtplib.SMTP("smtp.gmail.com", 587) as server:
                  server.starttls()
                  server.login(sender, password)
                  server.sendmail(sender, receiver, msg.as_string())
              print("Email sent successfully!")
          except Exception as e:
              print(f"Failed to send email: {e}")
          EOF
